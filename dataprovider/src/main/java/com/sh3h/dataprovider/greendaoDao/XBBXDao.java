package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.dataprovider.data.entity.response.XBBX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XBBX".
*/
public class XBBXDao extends AbstractDao<XBBX, Void> {

    public static final String TABLENAME = "XBBX";

    /**
     * Properties of entity XBBX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MTR_TYPE_CD = new Property(0, String.class, "MTR_TYPE_CD", false, "MTR__TYPE__CD");
        public final static Property DESCR = new Property(1, String.class, "DESCR", false, "DESCR");
    }


    public XBBXDao(DaoConfig config) {
        super(config);
    }
    
    public XBBXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XBBX\" (" + //
                "\"MTR__TYPE__CD\" TEXT," + // 0: MTR_TYPE_CD
                "\"DESCR\" TEXT);"); // 1: DESCR
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XBBX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XBBX entity) {
        stmt.clearBindings();
 
        String MTR_TYPE_CD = entity.getMTR_TYPE_CD();
        if (MTR_TYPE_CD != null) {
            stmt.bindString(1, MTR_TYPE_CD);
        }
 
        String DESCR = entity.getDESCR();
        if (DESCR != null) {
            stmt.bindString(2, DESCR);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XBBX entity) {
        stmt.clearBindings();
 
        String MTR_TYPE_CD = entity.getMTR_TYPE_CD();
        if (MTR_TYPE_CD != null) {
            stmt.bindString(1, MTR_TYPE_CD);
        }
 
        String DESCR = entity.getDESCR();
        if (DESCR != null) {
            stmt.bindString(2, DESCR);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public XBBX readEntity(Cursor cursor, int offset) {
        XBBX entity = new XBBX( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // MTR_TYPE_CD
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // DESCR
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XBBX entity, int offset) {
        entity.setMTR_TYPE_CD(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDESCR(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(XBBX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(XBBX entity) {
        return null;
    }

    @Override
    public boolean hasKey(XBBX entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
