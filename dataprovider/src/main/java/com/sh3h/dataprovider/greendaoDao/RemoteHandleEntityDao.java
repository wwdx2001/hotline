package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.dataprovider.data.entity.newentity.RemoteHandleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMOTE_HANDLE_ENTITY".
*/
public class RemoteHandleEntityDao extends AbstractDao<RemoteHandleEntity, Long> {

    public static final String TABLENAME = "REMOTE_HANDLE_ENTITY";

    /**
     * Properties of entity RemoteHandleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Albh = new Property(1, String.class, "albh", false, "ALBH");
        public final static Property Pch = new Property(2, String.class, "pch", false, "PCH");
        public final static Property Xh = new Property(3, String.class, "xh", false, "XH");
        public final static Property Yhh = new Property(4, String.class, "yhh", false, "YHH");
        public final static Property Zhbh = new Property(5, String.class, "zhbh", false, "ZHBH");
        public final static Property Cbds = new Property(6, String.class, "cbds", false, "CBDS");
        public final static Property Dssj = new Property(7, String.class, "dssj", false, "DSSJ");
        public final static Property Bz = new Property(8, String.class, "bz", false, "BZ");
    }


    public RemoteHandleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RemoteHandleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMOTE_HANDLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"ALBH\" TEXT," + // 1: albh
                "\"PCH\" TEXT," + // 2: pch
                "\"XH\" TEXT," + // 3: xh
                "\"YHH\" TEXT," + // 4: yhh
                "\"ZHBH\" TEXT," + // 5: zhbh
                "\"CBDS\" TEXT," + // 6: cbds
                "\"DSSJ\" TEXT," + // 7: dssj
                "\"BZ\" TEXT);"); // 8: bz
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMOTE_HANDLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemoteHandleEntity entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String albh = entity.getAlbh();
        if (albh != null) {
            stmt.bindString(2, albh);
        }
 
        String pch = entity.getPch();
        if (pch != null) {
            stmt.bindString(3, pch);
        }
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(4, xh);
        }
 
        String yhh = entity.getYhh();
        if (yhh != null) {
            stmt.bindString(5, yhh);
        }
 
        String zhbh = entity.getZhbh();
        if (zhbh != null) {
            stmt.bindString(6, zhbh);
        }
 
        String cbds = entity.getCbds();
        if (cbds != null) {
            stmt.bindString(7, cbds);
        }
 
        String dssj = entity.getDssj();
        if (dssj != null) {
            stmt.bindString(8, dssj);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(9, bz);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemoteHandleEntity entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String albh = entity.getAlbh();
        if (albh != null) {
            stmt.bindString(2, albh);
        }
 
        String pch = entity.getPch();
        if (pch != null) {
            stmt.bindString(3, pch);
        }
 
        String xh = entity.getXh();
        if (xh != null) {
            stmt.bindString(4, xh);
        }
 
        String yhh = entity.getYhh();
        if (yhh != null) {
            stmt.bindString(5, yhh);
        }
 
        String zhbh = entity.getZhbh();
        if (zhbh != null) {
            stmt.bindString(6, zhbh);
        }
 
        String cbds = entity.getCbds();
        if (cbds != null) {
            stmt.bindString(7, cbds);
        }
 
        String dssj = entity.getDssj();
        if (dssj != null) {
            stmt.bindString(8, dssj);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(9, bz);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RemoteHandleEntity readEntity(Cursor cursor, int offset) {
        RemoteHandleEntity entity = new RemoteHandleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // albh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pch
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // yhh
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zhbh
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cbds
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dssj
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // bz
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemoteHandleEntity entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlbh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPch(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYhh(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZhbh(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCbds(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDssj(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBz(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemoteHandleEntity entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemoteHandleEntity entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RemoteHandleEntity entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
