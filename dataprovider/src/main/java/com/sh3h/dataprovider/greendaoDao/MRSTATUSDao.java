package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.dataprovider.data.entity.response.MRSTATUS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MRSTATUS".
*/
public class MRSTATUSDao extends AbstractDao<MRSTATUS, Void> {

    public static final String TABLENAME = "MRSTATUS";

    /**
     * Properties of entity MRSTATUS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", false, "ID");
        public final static Property Mr_Class_Id = new Property(1, String.class, "Mr_Class_Id", false, "MR__CLASS__ID");
        public final static Property Mr_Desc = new Property(2, String.class, "Mr_Desc", false, "MR__DESC");
        public final static Property Mr_Status_Id = new Property(3, String.class, "Mr_Status_Id", false, "MR__STATUS__ID");
        public final static Property Mr_Status_Desc = new Property(4, String.class, "Mr_Status_Desc", false, "MR__STATUS__DESC");
        public final static Property Mr_Agr_Id = new Property(5, String.class, "Mr_Agr_Id", false, "MR__AGR__ID");
        public final static Property Mr_Agr_Desc = new Property(6, String.class, "Mr_Agr_Desc", false, "MR__AGR__DESC");
        public final static Property Mr_Onsite = new Property(7, String.class, "Mr_Onsite", false, "MR__ONSITE");
        public final static Property Mr_Onsite_Desc = new Property(8, String.class, "Mr_Onsite_Desc", false, "MR__ONSITE__DESC");
        public final static Property Mr_Delay = new Property(9, String.class, "Mr_Delay", false, "MR__DELAY");
        public final static Property Delay_Reason = new Property(10, String.class, "Delay_Reason", false, "DELAY__REASON");
        public final static Property High_Low_Id = new Property(11, String.class, "High_Low_Id", false, "HIGH__LOW__ID");
    }


    public MRSTATUSDao(DaoConfig config) {
        super(config);
    }
    
    public MRSTATUSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MRSTATUS\" (" + //
                "\"ID\" INTEGER," + // 0: ID
                "\"MR__CLASS__ID\" TEXT," + // 1: Mr_Class_Id
                "\"MR__DESC\" TEXT," + // 2: Mr_Desc
                "\"MR__STATUS__ID\" TEXT," + // 3: Mr_Status_Id
                "\"MR__STATUS__DESC\" TEXT," + // 4: Mr_Status_Desc
                "\"MR__AGR__ID\" TEXT," + // 5: Mr_Agr_Id
                "\"MR__AGR__DESC\" TEXT," + // 6: Mr_Agr_Desc
                "\"MR__ONSITE\" TEXT," + // 7: Mr_Onsite
                "\"MR__ONSITE__DESC\" TEXT," + // 8: Mr_Onsite_Desc
                "\"MR__DELAY\" TEXT," + // 9: Mr_Delay
                "\"DELAY__REASON\" TEXT," + // 10: Delay_Reason
                "\"HIGH__LOW__ID\" TEXT);"); // 11: High_Low_Id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MRSTATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MRSTATUS entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Mr_Class_Id = entity.getMr_Class_Id();
        if (Mr_Class_Id != null) {
            stmt.bindString(2, Mr_Class_Id);
        }
 
        String Mr_Desc = entity.getMr_Desc();
        if (Mr_Desc != null) {
            stmt.bindString(3, Mr_Desc);
        }
 
        String Mr_Status_Id = entity.getMr_Status_Id();
        if (Mr_Status_Id != null) {
            stmt.bindString(4, Mr_Status_Id);
        }
 
        String Mr_Status_Desc = entity.getMr_Status_Desc();
        if (Mr_Status_Desc != null) {
            stmt.bindString(5, Mr_Status_Desc);
        }
 
        String Mr_Agr_Id = entity.getMr_Agr_Id();
        if (Mr_Agr_Id != null) {
            stmt.bindString(6, Mr_Agr_Id);
        }
 
        String Mr_Agr_Desc = entity.getMr_Agr_Desc();
        if (Mr_Agr_Desc != null) {
            stmt.bindString(7, Mr_Agr_Desc);
        }
 
        String Mr_Onsite = entity.getMr_Onsite();
        if (Mr_Onsite != null) {
            stmt.bindString(8, Mr_Onsite);
        }
 
        String Mr_Onsite_Desc = entity.getMr_Onsite_Desc();
        if (Mr_Onsite_Desc != null) {
            stmt.bindString(9, Mr_Onsite_Desc);
        }
 
        String Mr_Delay = entity.getMr_Delay();
        if (Mr_Delay != null) {
            stmt.bindString(10, Mr_Delay);
        }
 
        String Delay_Reason = entity.getDelay_Reason();
        if (Delay_Reason != null) {
            stmt.bindString(11, Delay_Reason);
        }
 
        String High_Low_Id = entity.getHigh_Low_Id();
        if (High_Low_Id != null) {
            stmt.bindString(12, High_Low_Id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MRSTATUS entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Mr_Class_Id = entity.getMr_Class_Id();
        if (Mr_Class_Id != null) {
            stmt.bindString(2, Mr_Class_Id);
        }
 
        String Mr_Desc = entity.getMr_Desc();
        if (Mr_Desc != null) {
            stmt.bindString(3, Mr_Desc);
        }
 
        String Mr_Status_Id = entity.getMr_Status_Id();
        if (Mr_Status_Id != null) {
            stmt.bindString(4, Mr_Status_Id);
        }
 
        String Mr_Status_Desc = entity.getMr_Status_Desc();
        if (Mr_Status_Desc != null) {
            stmt.bindString(5, Mr_Status_Desc);
        }
 
        String Mr_Agr_Id = entity.getMr_Agr_Id();
        if (Mr_Agr_Id != null) {
            stmt.bindString(6, Mr_Agr_Id);
        }
 
        String Mr_Agr_Desc = entity.getMr_Agr_Desc();
        if (Mr_Agr_Desc != null) {
            stmt.bindString(7, Mr_Agr_Desc);
        }
 
        String Mr_Onsite = entity.getMr_Onsite();
        if (Mr_Onsite != null) {
            stmt.bindString(8, Mr_Onsite);
        }
 
        String Mr_Onsite_Desc = entity.getMr_Onsite_Desc();
        if (Mr_Onsite_Desc != null) {
            stmt.bindString(9, Mr_Onsite_Desc);
        }
 
        String Mr_Delay = entity.getMr_Delay();
        if (Mr_Delay != null) {
            stmt.bindString(10, Mr_Delay);
        }
 
        String Delay_Reason = entity.getDelay_Reason();
        if (Delay_Reason != null) {
            stmt.bindString(11, Delay_Reason);
        }
 
        String High_Low_Id = entity.getHigh_Low_Id();
        if (High_Low_Id != null) {
            stmt.bindString(12, High_Low_Id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MRSTATUS readEntity(Cursor cursor, int offset) {
        MRSTATUS entity = new MRSTATUS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Mr_Class_Id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Mr_Desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Mr_Status_Id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Mr_Status_Desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Mr_Agr_Id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Mr_Agr_Desc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Mr_Onsite
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Mr_Onsite_Desc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Mr_Delay
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Delay_Reason
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // High_Low_Id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MRSTATUS entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMr_Class_Id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMr_Desc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMr_Status_Id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMr_Status_Desc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMr_Agr_Id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMr_Agr_Desc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMr_Onsite(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMr_Onsite_Desc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMr_Delay(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDelay_Reason(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHigh_Low_Id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MRSTATUS entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MRSTATUS entity) {
        return null;
    }

    @Override
    public boolean hasKey(MRSTATUS entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
