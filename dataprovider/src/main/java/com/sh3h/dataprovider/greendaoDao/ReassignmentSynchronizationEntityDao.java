package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.dataprovider.data.entity.push.ReassignmentSynchronizationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REASSIGNMENT_SYNCHRONIZATION_ENTITY".
*/
public class ReassignmentSynchronizationEntityDao extends AbstractDao<ReassignmentSynchronizationEntity, Void> {

    public static final String TABLENAME = "REASSIGNMENT_SYNCHRONIZATION_ENTITY";

    /**
     * Properties of entity ReassignmentSynchronizationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FaId = new Property(0, String.class, "faId", false, "FA_ID");
        public final static Property CaseId = new Property(1, String.class, "caseId", false, "CASE_ID");
        public final static Property ActFlg = new Property(2, String.class, "actFlg", false, "ACT_FLG");
    }


    public ReassignmentSynchronizationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReassignmentSynchronizationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REASSIGNMENT_SYNCHRONIZATION_ENTITY\" (" + //
                "\"FA_ID\" TEXT," + // 0: faId
                "\"CASE_ID\" TEXT," + // 1: caseId
                "\"ACT_FLG\" TEXT);"); // 2: actFlg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REASSIGNMENT_SYNCHRONIZATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReassignmentSynchronizationEntity entity) {
        stmt.clearBindings();
 
        String faId = entity.getFaId();
        if (faId != null) {
            stmt.bindString(1, faId);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(2, caseId);
        }
 
        String actFlg = entity.getActFlg();
        if (actFlg != null) {
            stmt.bindString(3, actFlg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReassignmentSynchronizationEntity entity) {
        stmt.clearBindings();
 
        String faId = entity.getFaId();
        if (faId != null) {
            stmt.bindString(1, faId);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(2, caseId);
        }
 
        String actFlg = entity.getActFlg();
        if (actFlg != null) {
            stmt.bindString(3, actFlg);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ReassignmentSynchronizationEntity readEntity(Cursor cursor, int offset) {
        ReassignmentSynchronizationEntity entity = new ReassignmentSynchronizationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // faId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // caseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // actFlg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReassignmentSynchronizationEntity entity, int offset) {
        entity.setFaId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCaseId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActFlg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ReassignmentSynchronizationEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ReassignmentSynchronizationEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ReassignmentSynchronizationEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
