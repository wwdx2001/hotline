package com.sh3h.dataprovider.greendaoDao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 14): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 14;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        ArriveDataEntityDao.createTable(db, ifNotExists);
        CollectionHandleEntityDao.createTable(db, ifNotExists);
        HandleOrderEntityDao.createTable(db, ifNotExists);
        IllegalHandleEntityDao.createTable(db, ifNotExists);
        OverrateCallHandleEntityDao.createTable(db, ifNotExists);
        OverrateReceiptHandleEntityDao.createTable(db, ifNotExists);
        OverrateSelfHandleEntityDao.createTable(db, ifNotExists);
        QuestionHandleEntityDao.createTable(db, ifNotExists);
        RemoteHandleEntityDao.createTable(db, ifNotExists);
        AuditResultsSynchronizationEntityDao.createTable(db, ifNotExists);
        ReassignmentSynchronizationEntityDao.createTable(db, ifNotExists);
        WorkInfoSynchronizationEntityDao.createTable(db, ifNotExists);
        CLJBBeanDao.createTable(db, ifNotExists);
        CLJGDao.createTable(db, ifNotExists);
        DUMyTaskDao.createTable(db, ifNotExists);
        FSYYDao.createTable(db, ifNotExists);
        FYLXBeanDao.createTable(db, ifNotExists);
        FYLYBeanDao.createTable(db, ifNotExists);
        FYNRBeanDao.createTable(db, ifNotExists);
        JJCSDao.createTable(db, ifNotExists);
        MRMEMODao.createTable(db, ifNotExists);
        MRSTATUSDao.createTable(db, ifNotExists);
        XBBXDao.createTable(db, ifNotExists);
        InitDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        ArriveDataEntityDao.dropTable(db, ifExists);
        CollectionHandleEntityDao.dropTable(db, ifExists);
        HandleOrderEntityDao.dropTable(db, ifExists);
        IllegalHandleEntityDao.dropTable(db, ifExists);
        OverrateCallHandleEntityDao.dropTable(db, ifExists);
        OverrateReceiptHandleEntityDao.dropTable(db, ifExists);
        OverrateSelfHandleEntityDao.dropTable(db, ifExists);
        QuestionHandleEntityDao.dropTable(db, ifExists);
        RemoteHandleEntityDao.dropTable(db, ifExists);
        AuditResultsSynchronizationEntityDao.dropTable(db, ifExists);
        ReassignmentSynchronizationEntityDao.dropTable(db, ifExists);
        WorkInfoSynchronizationEntityDao.dropTable(db, ifExists);
        CLJBBeanDao.dropTable(db, ifExists);
        CLJGDao.dropTable(db, ifExists);
        DUMyTaskDao.dropTable(db, ifExists);
        FSYYDao.dropTable(db, ifExists);
        FYLXBeanDao.dropTable(db, ifExists);
        FYLYBeanDao.dropTable(db, ifExists);
        FYNRBeanDao.dropTable(db, ifExists);
        JJCSDao.dropTable(db, ifExists);
        MRMEMODao.dropTable(db, ifExists);
        MRSTATUSDao.dropTable(db, ifExists);
        XBBXDao.dropTable(db, ifExists);
        InitDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ArriveDataEntityDao.class);
        registerDaoClass(CollectionHandleEntityDao.class);
        registerDaoClass(HandleOrderEntityDao.class);
        registerDaoClass(IllegalHandleEntityDao.class);
        registerDaoClass(OverrateCallHandleEntityDao.class);
        registerDaoClass(OverrateReceiptHandleEntityDao.class);
        registerDaoClass(OverrateSelfHandleEntityDao.class);
        registerDaoClass(QuestionHandleEntityDao.class);
        registerDaoClass(RemoteHandleEntityDao.class);
        registerDaoClass(AuditResultsSynchronizationEntityDao.class);
        registerDaoClass(ReassignmentSynchronizationEntityDao.class);
        registerDaoClass(WorkInfoSynchronizationEntityDao.class);
        registerDaoClass(CLJBBeanDao.class);
        registerDaoClass(CLJGDao.class);
        registerDaoClass(DUMyTaskDao.class);
        registerDaoClass(FSYYDao.class);
        registerDaoClass(FYLXBeanDao.class);
        registerDaoClass(FYLYBeanDao.class);
        registerDaoClass(FYNRBeanDao.class);
        registerDaoClass(JJCSDao.class);
        registerDaoClass(MRMEMODao.class);
        registerDaoClass(MRSTATUSDao.class);
        registerDaoClass(XBBXDao.class);
        registerDaoClass(InitDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
