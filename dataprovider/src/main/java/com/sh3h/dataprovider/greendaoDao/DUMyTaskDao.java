package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.dataprovider.data.entity.response.DUMyTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DUMY_TASK".
*/
public class DUMyTaskDao extends AbstractDao<DUMyTask, Long> {

    public static final String TABLENAME = "DUMY_TASK";

    /**
     * Properties of entity DUMyTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property FaId = new Property(1, String.class, "faId", false, "FA_ID");
        public final static Property CaseId = new Property(2, String.class, "caseId", false, "CASE_ID");
        public final static Property OldCaseId = new Property(3, String.class, "oldCaseId", false, "OLD_CASE_ID");
        public final static Property CmSta = new Property(4, String.class, "cmSta", false, "CM_STA");
        public final static Property EntityName = new Property(5, String.class, "entityName", false, "ENTITY_NAME");
        public final static Property DisPatGrp = new Property(6, String.class, "disPatGrp", false, "DIS_PAT_GRP");
        public final static Property RepCd = new Property(7, String.class, "repCd", false, "REP_CD");
        public final static Property AcctId = new Property(8, String.class, "acctId", false, "ACCT_ID");
        public final static Property Ldsj = new Property(9, String.class, "ldsj", false, "LDSJ");
        public final static Property Fsdz = new Property(10, String.class, "fsdz", false, "FSDZ");
        public final static Property ContactValue = new Property(11, String.class, "contactValue", false, "CONTACT_VALUE");
        public final static Property Mobile = new Property(12, String.class, "mobile", false, "MOBILE");
        public final static Property Fyly = new Property(13, String.class, "fyly", false, "FYLY");
        public final static Property FaTypeCd = new Property(14, String.class, "faTypeCd", false, "FA_TYPE_CD");
        public final static Property Fynr = new Property(15, String.class, "fynr", false, "FYNR");
        public final static Property Cljb = new Property(16, String.class, "cljb", false, "CLJB");
        public final static Property Clsx = new Property(17, String.class, "clsx", false, "CLSX");
        public final static Property ClsxLong = new Property(18, Long.class, "clsxLong", false, "CLSX_LONG");
        public final static Property Comment = new Property(19, String.class, "comment", false, "COMMENT");
        public final static Property CreDttm = new Property(20, String.class, "creDttm", false, "CRE_DTTM");
        public final static Property UserId = new Property(21, String.class, "userId", false, "USER_ID");
        public final static Property ShComment = new Property(22, String.class, "shComment", false, "SH_COMMENT");
        public final static Property IsFlag = new Property(23, String.class, "isFlag", false, "IS_FLAG");
        public final static Property ApplyType = new Property(24, String.class, "applyType", false, "APPLY_TYPE");
        public final static Property Yysj = new Property(25, String.class, "yysj", false, "YYSJ");
        public final static Property TaskState = new Property(26, int.class, "taskState", false, "TASK_STATE");
        public final static Property State = new Property(27, int.class, "state", false, "STATE");
        public final static Property IsUploadSuccess = new Property(28, int.class, "isUploadSuccess", false, "IS_UPLOAD_SUCCESS");
    }


    public DUMyTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DUMyTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DUMY_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"FA_ID\" TEXT," + // 1: faId
                "\"CASE_ID\" TEXT," + // 2: caseId
                "\"OLD_CASE_ID\" TEXT," + // 3: oldCaseId
                "\"CM_STA\" TEXT," + // 4: cmSta
                "\"ENTITY_NAME\" TEXT," + // 5: entityName
                "\"DIS_PAT_GRP\" TEXT," + // 6: disPatGrp
                "\"REP_CD\" TEXT," + // 7: repCd
                "\"ACCT_ID\" TEXT," + // 8: acctId
                "\"LDSJ\" TEXT," + // 9: ldsj
                "\"FSDZ\" TEXT," + // 10: fsdz
                "\"CONTACT_VALUE\" TEXT," + // 11: contactValue
                "\"MOBILE\" TEXT," + // 12: mobile
                "\"FYLY\" TEXT," + // 13: fyly
                "\"FA_TYPE_CD\" TEXT," + // 14: faTypeCd
                "\"FYNR\" TEXT," + // 15: fynr
                "\"CLJB\" TEXT," + // 16: cljb
                "\"CLSX\" TEXT," + // 17: clsx
                "\"CLSX_LONG\" INTEGER," + // 18: clsxLong
                "\"COMMENT\" TEXT," + // 19: comment
                "\"CRE_DTTM\" TEXT," + // 20: creDttm
                "\"USER_ID\" TEXT," + // 21: userId
                "\"SH_COMMENT\" TEXT," + // 22: shComment
                "\"IS_FLAG\" TEXT," + // 23: isFlag
                "\"APPLY_TYPE\" TEXT," + // 24: applyType
                "\"YYSJ\" TEXT," + // 25: yysj
                "\"TASK_STATE\" INTEGER NOT NULL ," + // 26: taskState
                "\"STATE\" INTEGER NOT NULL ," + // 27: state
                "\"IS_UPLOAD_SUCCESS\" INTEGER NOT NULL );"); // 28: isUploadSuccess
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DUMY_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DUMyTask entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String faId = entity.getFaId();
        if (faId != null) {
            stmt.bindString(2, faId);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(3, caseId);
        }
 
        String oldCaseId = entity.getOldCaseId();
        if (oldCaseId != null) {
            stmt.bindString(4, oldCaseId);
        }
 
        String cmSta = entity.getCmSta();
        if (cmSta != null) {
            stmt.bindString(5, cmSta);
        }
 
        String entityName = entity.getEntityName();
        if (entityName != null) {
            stmt.bindString(6, entityName);
        }
 
        String disPatGrp = entity.getDisPatGrp();
        if (disPatGrp != null) {
            stmt.bindString(7, disPatGrp);
        }
 
        String repCd = entity.getRepCd();
        if (repCd != null) {
            stmt.bindString(8, repCd);
        }
 
        String acctId = entity.getAcctId();
        if (acctId != null) {
            stmt.bindString(9, acctId);
        }
 
        String ldsj = entity.getLdsj();
        if (ldsj != null) {
            stmt.bindString(10, ldsj);
        }
 
        String fsdz = entity.getFsdz();
        if (fsdz != null) {
            stmt.bindString(11, fsdz);
        }
 
        String contactValue = entity.getContactValue();
        if (contactValue != null) {
            stmt.bindString(12, contactValue);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(13, mobile);
        }
 
        String fyly = entity.getFyly();
        if (fyly != null) {
            stmt.bindString(14, fyly);
        }
 
        String faTypeCd = entity.getFaTypeCd();
        if (faTypeCd != null) {
            stmt.bindString(15, faTypeCd);
        }
 
        String fynr = entity.getFynr();
        if (fynr != null) {
            stmt.bindString(16, fynr);
        }
 
        String cljb = entity.getCljb();
        if (cljb != null) {
            stmt.bindString(17, cljb);
        }
 
        String clsx = entity.getClsx();
        if (clsx != null) {
            stmt.bindString(18, clsx);
        }
 
        Long clsxLong = entity.getClsxLong();
        if (clsxLong != null) {
            stmt.bindLong(19, clsxLong);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(20, comment);
        }
 
        String creDttm = entity.getCreDttm();
        if (creDttm != null) {
            stmt.bindString(21, creDttm);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(22, userId);
        }
 
        String shComment = entity.getShComment();
        if (shComment != null) {
            stmt.bindString(23, shComment);
        }
 
        String isFlag = entity.getIsFlag();
        if (isFlag != null) {
            stmt.bindString(24, isFlag);
        }
 
        String applyType = entity.getApplyType();
        if (applyType != null) {
            stmt.bindString(25, applyType);
        }
 
        String yysj = entity.getYysj();
        if (yysj != null) {
            stmt.bindString(26, yysj);
        }
        stmt.bindLong(27, entity.getTaskState());
        stmt.bindLong(28, entity.getState());
        stmt.bindLong(29, entity.getIsUploadSuccess());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DUMyTask entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String faId = entity.getFaId();
        if (faId != null) {
            stmt.bindString(2, faId);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(3, caseId);
        }
 
        String oldCaseId = entity.getOldCaseId();
        if (oldCaseId != null) {
            stmt.bindString(4, oldCaseId);
        }
 
        String cmSta = entity.getCmSta();
        if (cmSta != null) {
            stmt.bindString(5, cmSta);
        }
 
        String entityName = entity.getEntityName();
        if (entityName != null) {
            stmt.bindString(6, entityName);
        }
 
        String disPatGrp = entity.getDisPatGrp();
        if (disPatGrp != null) {
            stmt.bindString(7, disPatGrp);
        }
 
        String repCd = entity.getRepCd();
        if (repCd != null) {
            stmt.bindString(8, repCd);
        }
 
        String acctId = entity.getAcctId();
        if (acctId != null) {
            stmt.bindString(9, acctId);
        }
 
        String ldsj = entity.getLdsj();
        if (ldsj != null) {
            stmt.bindString(10, ldsj);
        }
 
        String fsdz = entity.getFsdz();
        if (fsdz != null) {
            stmt.bindString(11, fsdz);
        }
 
        String contactValue = entity.getContactValue();
        if (contactValue != null) {
            stmt.bindString(12, contactValue);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(13, mobile);
        }
 
        String fyly = entity.getFyly();
        if (fyly != null) {
            stmt.bindString(14, fyly);
        }
 
        String faTypeCd = entity.getFaTypeCd();
        if (faTypeCd != null) {
            stmt.bindString(15, faTypeCd);
        }
 
        String fynr = entity.getFynr();
        if (fynr != null) {
            stmt.bindString(16, fynr);
        }
 
        String cljb = entity.getCljb();
        if (cljb != null) {
            stmt.bindString(17, cljb);
        }
 
        String clsx = entity.getClsx();
        if (clsx != null) {
            stmt.bindString(18, clsx);
        }
 
        Long clsxLong = entity.getClsxLong();
        if (clsxLong != null) {
            stmt.bindLong(19, clsxLong);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(20, comment);
        }
 
        String creDttm = entity.getCreDttm();
        if (creDttm != null) {
            stmt.bindString(21, creDttm);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(22, userId);
        }
 
        String shComment = entity.getShComment();
        if (shComment != null) {
            stmt.bindString(23, shComment);
        }
 
        String isFlag = entity.getIsFlag();
        if (isFlag != null) {
            stmt.bindString(24, isFlag);
        }
 
        String applyType = entity.getApplyType();
        if (applyType != null) {
            stmt.bindString(25, applyType);
        }
 
        String yysj = entity.getYysj();
        if (yysj != null) {
            stmt.bindString(26, yysj);
        }
        stmt.bindLong(27, entity.getTaskState());
        stmt.bindLong(28, entity.getState());
        stmt.bindLong(29, entity.getIsUploadSuccess());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DUMyTask readEntity(Cursor cursor, int offset) {
        DUMyTask entity = new DUMyTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // faId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // caseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oldCaseId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cmSta
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // entityName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // disPatGrp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // repCd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // acctId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ldsj
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fsdz
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // contactValue
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mobile
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fyly
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // faTypeCd
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fynr
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // cljb
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // clsx
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // clsxLong
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // comment
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // creDttm
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // userId
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // shComment
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // isFlag
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // applyType
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // yysj
            cursor.getInt(offset + 26), // taskState
            cursor.getInt(offset + 27), // state
            cursor.getInt(offset + 28) // isUploadSuccess
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DUMyTask entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFaId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCaseId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOldCaseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCmSta(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEntityName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisPatGrp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRepCd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAcctId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLdsj(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFsdz(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContactValue(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMobile(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFyly(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFaTypeCd(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFynr(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCljb(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setClsx(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setClsxLong(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setComment(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreDttm(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUserId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setShComment(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsFlag(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setApplyType(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setYysj(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTaskState(cursor.getInt(offset + 26));
        entity.setState(cursor.getInt(offset + 27));
        entity.setIsUploadSuccess(cursor.getInt(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DUMyTask entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DUMyTask entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DUMyTask entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
