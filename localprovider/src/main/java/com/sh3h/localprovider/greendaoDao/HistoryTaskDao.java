package com.sh3h.localprovider.greendaoDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sh3h.localprovider.greendaoEntity.HistoryTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HL_HISTORY".
*/
public class HistoryTaskDao extends AbstractDao<HistoryTask, Long> {

    public static final String TABLENAME = "HL_HISTORY";

    /**
     * Properties of entity HistoryTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property USER_ID = new Property(1, int.class, "USER_ID", false, "USER__ID");
        public final static Property TASK_ID = new Property(2, String.class, "TASK_ID", false, "TASK__ID");
        public final static Property TASK_TYPE = new Property(3, int.class, "TASK_TYPE", false, "TASK__TYPE");
        public final static Property TASK_STATE = new Property(4, int.class, "TASK_STATE", false, "TASK__STATE");
        public final static Property TASK_CONTENT = new Property(5, String.class, "TASK_CONTENT", false, "TASK__CONTENT");
        public final static Property TASK_REPLY = new Property(6, String.class, "TASK_REPLY", false, "TASK__REPLY");
        public final static Property REPLY_TIME = new Property(7, long.class, "REPLY_TIME", false, "REPLY__TIME");
        public final static Property UPLOAD_FLAG = new Property(8, int.class, "UPLOAD_FLAG", false, "UPLOAD__FLAG");
        public final static Property EXTEND = new Property(9, String.class, "EXTEND", false, "EXTEND");
    }

    private DaoSession daoSession;

    private Query<HistoryTask> task_HistoryTaskListQuery;

    public HistoryTaskDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HL_HISTORY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"USER__ID\" INTEGER NOT NULL ," + // 1: USER_ID
                "\"TASK__ID\" TEXT NOT NULL ," + // 2: TASK_ID
                "\"TASK__TYPE\" INTEGER NOT NULL ," + // 3: TASK_TYPE
                "\"TASK__STATE\" INTEGER NOT NULL ," + // 4: TASK_STATE
                "\"TASK__CONTENT\" TEXT," + // 5: TASK_CONTENT
                "\"TASK__REPLY\" TEXT," + // 6: TASK_REPLY
                "\"REPLY__TIME\" INTEGER NOT NULL ," + // 7: REPLY_TIME
                "\"UPLOAD__FLAG\" INTEGER NOT NULL ," + // 8: UPLOAD_FLAG
                "\"EXTEND\" TEXT);"); // 9: EXTEND
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HL_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryTask entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUSER_ID());
        stmt.bindString(3, entity.getTASK_ID());
        stmt.bindLong(4, entity.getTASK_TYPE());
        stmt.bindLong(5, entity.getTASK_STATE());
 
        String TASK_CONTENT = entity.getTASK_CONTENT();
        if (TASK_CONTENT != null) {
            stmt.bindString(6, TASK_CONTENT);
        }
 
        String TASK_REPLY = entity.getTASK_REPLY();
        if (TASK_REPLY != null) {
            stmt.bindString(7, TASK_REPLY);
        }
        stmt.bindLong(8, entity.getREPLY_TIME());
        stmt.bindLong(9, entity.getUPLOAD_FLAG());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(10, EXTEND);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryTask entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUSER_ID());
        stmt.bindString(3, entity.getTASK_ID());
        stmt.bindLong(4, entity.getTASK_TYPE());
        stmt.bindLong(5, entity.getTASK_STATE());
 
        String TASK_CONTENT = entity.getTASK_CONTENT();
        if (TASK_CONTENT != null) {
            stmt.bindString(6, TASK_CONTENT);
        }
 
        String TASK_REPLY = entity.getTASK_REPLY();
        if (TASK_REPLY != null) {
            stmt.bindString(7, TASK_REPLY);
        }
        stmt.bindLong(8, entity.getREPLY_TIME());
        stmt.bindLong(9, entity.getUPLOAD_FLAG());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(10, EXTEND);
        }
    }

    @Override
    protected final void attachEntity(HistoryTask entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryTask readEntity(Cursor cursor, int offset) {
        HistoryTask entity = new HistoryTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // USER_ID
            cursor.getString(offset + 2), // TASK_ID
            cursor.getInt(offset + 3), // TASK_TYPE
            cursor.getInt(offset + 4), // TASK_STATE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TASK_CONTENT
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TASK_REPLY
            cursor.getLong(offset + 7), // REPLY_TIME
            cursor.getInt(offset + 8), // UPLOAD_FLAG
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // EXTEND
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryTask entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUSER_ID(cursor.getInt(offset + 1));
        entity.setTASK_ID(cursor.getString(offset + 2));
        entity.setTASK_TYPE(cursor.getInt(offset + 3));
        entity.setTASK_STATE(cursor.getInt(offset + 4));
        entity.setTASK_CONTENT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTASK_REPLY(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setREPLY_TIME(cursor.getLong(offset + 7));
        entity.setUPLOAD_FLAG(cursor.getInt(offset + 8));
        entity.setEXTEND(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryTask entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryTask entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryTask entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "historyTaskList" to-many relationship of Task. */
    public List<HistoryTask> _queryTask_HistoryTaskList(String TASK_ID) {
        synchronized (this) {
            if (task_HistoryTaskListQuery == null) {
                QueryBuilder<HistoryTask> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TASK_ID.eq(null));
                task_HistoryTaskListQuery = queryBuilder.build();
            }
        }
        Query<HistoryTask> query = task_HistoryTaskListQuery.forCurrentThread();
        query.setParameter(0, TASK_ID);
        return query.list();
    }

}
