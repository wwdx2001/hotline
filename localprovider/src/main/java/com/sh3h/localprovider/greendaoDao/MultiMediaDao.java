package com.sh3h.localprovider.greendaoDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sh3h.localprovider.greendaoEntity.MultiMedia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HL_MULTIMEDIA".
*/
public class MultiMediaDao extends AbstractDao<MultiMedia, Long> {

    public static final String TABLENAME = "HL_MULTIMEDIA";

    /**
     * Properties of entity MultiMedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property USER_ID = new Property(1, int.class, "USER_ID", false, "USER__ID");
        public final static Property TASK_ID = new Property(2, String.class, "TASK_ID", false, "TASK__ID");
        public final static Property TASK_TYPE = new Property(3, int.class, "TASK_TYPE", false, "TASK__TYPE");
        public final static Property TASK_STATE = new Property(4, int.class, "TASK_STATE", false, "TASK__STATE");
        public final static Property FILE_TYPE = new Property(5, int.class, "FILE_TYPE", false, "FILE__TYPE");
        public final static Property FILE_NAME = new Property(6, String.class, "FILE_NAME", false, "FILE__NAME");
        public final static Property FILE_HASH = new Property(7, String.class, "FILE_HASH", false, "FILE__HASH");
        public final static Property FILE_URL = new Property(8, String.class, "FILE_URL", false, "FILE__URL");
        public final static Property UPLOAD_FLAG = new Property(9, int.class, "UPLOAD_FLAG", false, "UPLOAD__FLAG");
        public final static Property EXTEND = new Property(10, String.class, "EXTEND", false, "EXTEND");
        public final static Property FILE_TIME = new Property(11, long.class, "FILE_TIME", false, "FILE__TIME");
    }

    private Query<MultiMedia> historyTask_MultiMediasQuery;
    private Query<MultiMedia> task_MultiMediasQuery;

    public MultiMediaDao(DaoConfig config) {
        super(config);
    }
    
    public MultiMediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HL_MULTIMEDIA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"USER__ID\" INTEGER NOT NULL ," + // 1: USER_ID
                "\"TASK__ID\" TEXT NOT NULL ," + // 2: TASK_ID
                "\"TASK__TYPE\" INTEGER NOT NULL ," + // 3: TASK_TYPE
                "\"TASK__STATE\" INTEGER NOT NULL ," + // 4: TASK_STATE
                "\"FILE__TYPE\" INTEGER NOT NULL ," + // 5: FILE_TYPE
                "\"FILE__NAME\" TEXT NOT NULL ," + // 6: FILE_NAME
                "\"FILE__HASH\" TEXT," + // 7: FILE_HASH
                "\"FILE__URL\" TEXT," + // 8: FILE_URL
                "\"UPLOAD__FLAG\" INTEGER NOT NULL ," + // 9: UPLOAD_FLAG
                "\"EXTEND\" TEXT," + // 10: EXTEND
                "\"FILE__TIME\" INTEGER NOT NULL );"); // 11: FILE_TIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HL_MULTIMEDIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MultiMedia entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUSER_ID());
        stmt.bindString(3, entity.getTASK_ID());
        stmt.bindLong(4, entity.getTASK_TYPE());
        stmt.bindLong(5, entity.getTASK_STATE());
        stmt.bindLong(6, entity.getFILE_TYPE());
        stmt.bindString(7, entity.getFILE_NAME());
 
        String FILE_HASH = entity.getFILE_HASH();
        if (FILE_HASH != null) {
            stmt.bindString(8, FILE_HASH);
        }
 
        String FILE_URL = entity.getFILE_URL();
        if (FILE_URL != null) {
            stmt.bindString(9, FILE_URL);
        }
        stmt.bindLong(10, entity.getUPLOAD_FLAG());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(11, EXTEND);
        }
        stmt.bindLong(12, entity.getFILE_TIME());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MultiMedia entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUSER_ID());
        stmt.bindString(3, entity.getTASK_ID());
        stmt.bindLong(4, entity.getTASK_TYPE());
        stmt.bindLong(5, entity.getTASK_STATE());
        stmt.bindLong(6, entity.getFILE_TYPE());
        stmt.bindString(7, entity.getFILE_NAME());
 
        String FILE_HASH = entity.getFILE_HASH();
        if (FILE_HASH != null) {
            stmt.bindString(8, FILE_HASH);
        }
 
        String FILE_URL = entity.getFILE_URL();
        if (FILE_URL != null) {
            stmt.bindString(9, FILE_URL);
        }
        stmt.bindLong(10, entity.getUPLOAD_FLAG());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(11, EXTEND);
        }
        stmt.bindLong(12, entity.getFILE_TIME());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MultiMedia readEntity(Cursor cursor, int offset) {
        MultiMedia entity = new MultiMedia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // USER_ID
            cursor.getString(offset + 2), // TASK_ID
            cursor.getInt(offset + 3), // TASK_TYPE
            cursor.getInt(offset + 4), // TASK_STATE
            cursor.getInt(offset + 5), // FILE_TYPE
            cursor.getString(offset + 6), // FILE_NAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FILE_HASH
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FILE_URL
            cursor.getInt(offset + 9), // UPLOAD_FLAG
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // EXTEND
            cursor.getLong(offset + 11) // FILE_TIME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MultiMedia entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUSER_ID(cursor.getInt(offset + 1));
        entity.setTASK_ID(cursor.getString(offset + 2));
        entity.setTASK_TYPE(cursor.getInt(offset + 3));
        entity.setTASK_STATE(cursor.getInt(offset + 4));
        entity.setFILE_TYPE(cursor.getInt(offset + 5));
        entity.setFILE_NAME(cursor.getString(offset + 6));
        entity.setFILE_HASH(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFILE_URL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUPLOAD_FLAG(cursor.getInt(offset + 9));
        entity.setEXTEND(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFILE_TIME(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MultiMedia entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MultiMedia entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MultiMedia entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "multiMedias" to-many relationship of HistoryTask. */
    public List<MultiMedia> _queryHistoryTask_MultiMedias(String TASK_ID, int TASK_STATE, int TASK_TYPE) {
        synchronized (this) {
            if (historyTask_MultiMediasQuery == null) {
                QueryBuilder<MultiMedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TASK_ID.eq(null));
                queryBuilder.where(Properties.TASK_STATE.eq(null));
                queryBuilder.where(Properties.TASK_TYPE.eq(null));
                historyTask_MultiMediasQuery = queryBuilder.build();
            }
        }
        Query<MultiMedia> query = historyTask_MultiMediasQuery.forCurrentThread();
        query.setParameter(0, TASK_ID);
        query.setParameter(1, TASK_STATE);
        query.setParameter(2, TASK_TYPE);
        return query.list();
    }

    /** Internal query to resolve the "multiMedias" to-many relationship of Task. */
    public List<MultiMedia> _queryTask_MultiMedias(String TASK_ID) {
        synchronized (this) {
            if (task_MultiMediasQuery == null) {
                QueryBuilder<MultiMedia> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TASK_ID.eq(null));
                task_MultiMediasQuery = queryBuilder.build();
            }
        }
        Query<MultiMedia> query = task_MultiMediasQuery.forCurrentThread();
        query.setParameter(0, TASK_ID);
        return query.list();
    }

}
