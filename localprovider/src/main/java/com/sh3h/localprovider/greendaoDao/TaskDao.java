package com.sh3h.localprovider.greendaoDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sh3h.localprovider.greendaoEntity.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HL_TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "HL_TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property USER_ID = new Property(1, int.class, "USER_ID", false, "USER__ID");
        public final static Property CUSTOMER_ID = new Property(2, String.class, "CUSTOMER_ID", false, "CUSTOMER__ID");
        public final static Property TASK_ID = new Property(3, String.class, "TASK_ID", false, "TASK__ID");
        public final static Property ISSUER = new Property(4, String.class, "ISSUER", false, "ISSUER");
        public final static Property STATION = new Property(5, String.class, "STATION", false, "STATION");
        public final static Property ISSUE_NAME = new Property(6, String.class, "ISSUE_NAME", false, "ISSUE__NAME");
        public final static Property ISSUE_ORIGIN = new Property(7, String.class, "ISSUE_ORIGIN", false, "ISSUE__ORIGIN");
        public final static Property ISSUE_TIME = new Property(8, long.class, "ISSUE_TIME", false, "ISSUE__TIME");
        public final static Property ISSUE_ADDRESS = new Property(9, String.class, "ISSUE_ADDRESS", false, "ISSUE__ADDRESS");
        public final static Property TELEPHONE = new Property(10, String.class, "TELEPHONE", false, "TELEPHONE");
        public final static Property MOBILE = new Property(11, String.class, "MOBILE", false, "MOBILE");
        public final static Property ISSUE_TYPE = new Property(12, String.class, "ISSUE_TYPE", false, "ISSUE__TYPE");
        public final static Property ISSUE_CONTENT = new Property(13, String.class, "ISSUE_CONTENT", false, "ISSUE__CONTENT");
        public final static Property REPLY_CLASS = new Property(14, String.class, "REPLY_CLASS", false, "REPLY__CLASS");
        public final static Property REPLY_DEADLINE = new Property(15, long.class, "REPLY_DEADLINE", false, "REPLY__DEADLINE");
        public final static Property RECEIVE_COMMENT = new Property(16, String.class, "RECEIVE_COMMENT", false, "RECEIVE__COMMENT");
        public final static Property CARD_ID = new Property(17, String.class, "CARD_ID", false, "CARD__ID");
        public final static Property TASK_TYPE = new Property(18, int.class, "TASK_TYPE", false, "TASK__TYPE");
        public final static Property TASK_STATE = new Property(19, int.class, "TASK_STATE", false, "TASK__STATE");
        public final static Property DISPATCH_TIME = new Property(20, long.class, "DISPATCH_TIME", false, "DISPATCH__TIME");
        public final static Property UPLOAD_FLAG = new Property(21, int.class, "UPLOAD_FLAG", false, "UPLOAD__FLAG");
        public final static Property EXTEND = new Property(22, String.class, "EXTEND", false, "EXTEND");
    }

    private DaoSession daoSession;

    private Query<Task> historyTask_TasksQuery;

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HL_TASK\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"USER__ID\" INTEGER NOT NULL ," + // 1: USER_ID
                "\"CUSTOMER__ID\" TEXT," + // 2: CUSTOMER_ID
                "\"TASK__ID\" TEXT NOT NULL ," + // 3: TASK_ID
                "\"ISSUER\" TEXT," + // 4: ISSUER
                "\"STATION\" TEXT," + // 5: STATION
                "\"ISSUE__NAME\" TEXT," + // 6: ISSUE_NAME
                "\"ISSUE__ORIGIN\" TEXT," + // 7: ISSUE_ORIGIN
                "\"ISSUE__TIME\" INTEGER NOT NULL ," + // 8: ISSUE_TIME
                "\"ISSUE__ADDRESS\" TEXT," + // 9: ISSUE_ADDRESS
                "\"TELEPHONE\" TEXT," + // 10: TELEPHONE
                "\"MOBILE\" TEXT," + // 11: MOBILE
                "\"ISSUE__TYPE\" TEXT NOT NULL ," + // 12: ISSUE_TYPE
                "\"ISSUE__CONTENT\" TEXT NOT NULL ," + // 13: ISSUE_CONTENT
                "\"REPLY__CLASS\" TEXT NOT NULL ," + // 14: REPLY_CLASS
                "\"REPLY__DEADLINE\" INTEGER NOT NULL ," + // 15: REPLY_DEADLINE
                "\"RECEIVE__COMMENT\" TEXT," + // 16: RECEIVE_COMMENT
                "\"CARD__ID\" TEXT," + // 17: CARD_ID
                "\"TASK__TYPE\" INTEGER NOT NULL ," + // 18: TASK_TYPE
                "\"TASK__STATE\" INTEGER NOT NULL ," + // 19: TASK_STATE
                "\"DISPATCH__TIME\" INTEGER NOT NULL ," + // 20: DISPATCH_TIME
                "\"UPLOAD__FLAG\" INTEGER NOT NULL ," + // 21: UPLOAD_FLAG
                "\"EXTEND\" TEXT);"); // 22: EXTEND
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HL_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUSER_ID());
 
        String CUSTOMER_ID = entity.getCUSTOMER_ID();
        if (CUSTOMER_ID != null) {
            stmt.bindString(3, CUSTOMER_ID);
        }
        stmt.bindString(4, entity.getTASK_ID());
 
        String ISSUER = entity.getISSUER();
        if (ISSUER != null) {
            stmt.bindString(5, ISSUER);
        }
 
        String STATION = entity.getSTATION();
        if (STATION != null) {
            stmt.bindString(6, STATION);
        }
 
        String ISSUE_NAME = entity.getISSUE_NAME();
        if (ISSUE_NAME != null) {
            stmt.bindString(7, ISSUE_NAME);
        }
 
        String ISSUE_ORIGIN = entity.getISSUE_ORIGIN();
        if (ISSUE_ORIGIN != null) {
            stmt.bindString(8, ISSUE_ORIGIN);
        }
        stmt.bindLong(9, entity.getISSUE_TIME());
 
        String ISSUE_ADDRESS = entity.getISSUE_ADDRESS();
        if (ISSUE_ADDRESS != null) {
            stmt.bindString(10, ISSUE_ADDRESS);
        }
 
        String TELEPHONE = entity.getTELEPHONE();
        if (TELEPHONE != null) {
            stmt.bindString(11, TELEPHONE);
        }
 
        String MOBILE = entity.getMOBILE();
        if (MOBILE != null) {
            stmt.bindString(12, MOBILE);
        }
        stmt.bindString(13, entity.getISSUE_TYPE());
        stmt.bindString(14, entity.getISSUE_CONTENT());
        stmt.bindString(15, entity.getREPLY_CLASS());
        stmt.bindLong(16, entity.getREPLY_DEADLINE());
 
        String RECEIVE_COMMENT = entity.getRECEIVE_COMMENT();
        if (RECEIVE_COMMENT != null) {
            stmt.bindString(17, RECEIVE_COMMENT);
        }
 
        String CARD_ID = entity.getCARD_ID();
        if (CARD_ID != null) {
            stmt.bindString(18, CARD_ID);
        }
        stmt.bindLong(19, entity.getTASK_TYPE());
        stmt.bindLong(20, entity.getTASK_STATE());
        stmt.bindLong(21, entity.getDISPATCH_TIME());
        stmt.bindLong(22, entity.getUPLOAD_FLAG());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(23, EXTEND);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getUSER_ID());
 
        String CUSTOMER_ID = entity.getCUSTOMER_ID();
        if (CUSTOMER_ID != null) {
            stmt.bindString(3, CUSTOMER_ID);
        }
        stmt.bindString(4, entity.getTASK_ID());
 
        String ISSUER = entity.getISSUER();
        if (ISSUER != null) {
            stmt.bindString(5, ISSUER);
        }
 
        String STATION = entity.getSTATION();
        if (STATION != null) {
            stmt.bindString(6, STATION);
        }
 
        String ISSUE_NAME = entity.getISSUE_NAME();
        if (ISSUE_NAME != null) {
            stmt.bindString(7, ISSUE_NAME);
        }
 
        String ISSUE_ORIGIN = entity.getISSUE_ORIGIN();
        if (ISSUE_ORIGIN != null) {
            stmt.bindString(8, ISSUE_ORIGIN);
        }
        stmt.bindLong(9, entity.getISSUE_TIME());
 
        String ISSUE_ADDRESS = entity.getISSUE_ADDRESS();
        if (ISSUE_ADDRESS != null) {
            stmt.bindString(10, ISSUE_ADDRESS);
        }
 
        String TELEPHONE = entity.getTELEPHONE();
        if (TELEPHONE != null) {
            stmt.bindString(11, TELEPHONE);
        }
 
        String MOBILE = entity.getMOBILE();
        if (MOBILE != null) {
            stmt.bindString(12, MOBILE);
        }
        stmt.bindString(13, entity.getISSUE_TYPE());
        stmt.bindString(14, entity.getISSUE_CONTENT());
        stmt.bindString(15, entity.getREPLY_CLASS());
        stmt.bindLong(16, entity.getREPLY_DEADLINE());
 
        String RECEIVE_COMMENT = entity.getRECEIVE_COMMENT();
        if (RECEIVE_COMMENT != null) {
            stmt.bindString(17, RECEIVE_COMMENT);
        }
 
        String CARD_ID = entity.getCARD_ID();
        if (CARD_ID != null) {
            stmt.bindString(18, CARD_ID);
        }
        stmt.bindLong(19, entity.getTASK_TYPE());
        stmt.bindLong(20, entity.getTASK_STATE());
        stmt.bindLong(21, entity.getDISPATCH_TIME());
        stmt.bindLong(22, entity.getUPLOAD_FLAG());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(23, EXTEND);
        }
    }

    @Override
    protected final void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // USER_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CUSTOMER_ID
            cursor.getString(offset + 3), // TASK_ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ISSUER
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // STATION
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ISSUE_NAME
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ISSUE_ORIGIN
            cursor.getLong(offset + 8), // ISSUE_TIME
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ISSUE_ADDRESS
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TELEPHONE
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // MOBILE
            cursor.getString(offset + 12), // ISSUE_TYPE
            cursor.getString(offset + 13), // ISSUE_CONTENT
            cursor.getString(offset + 14), // REPLY_CLASS
            cursor.getLong(offset + 15), // REPLY_DEADLINE
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // RECEIVE_COMMENT
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CARD_ID
            cursor.getInt(offset + 18), // TASK_TYPE
            cursor.getInt(offset + 19), // TASK_STATE
            cursor.getLong(offset + 20), // DISPATCH_TIME
            cursor.getInt(offset + 21), // UPLOAD_FLAG
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // EXTEND
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUSER_ID(cursor.getInt(offset + 1));
        entity.setCUSTOMER_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTASK_ID(cursor.getString(offset + 3));
        entity.setISSUER(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSTATION(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setISSUE_NAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setISSUE_ORIGIN(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setISSUE_TIME(cursor.getLong(offset + 8));
        entity.setISSUE_ADDRESS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTELEPHONE(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMOBILE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setISSUE_TYPE(cursor.getString(offset + 12));
        entity.setISSUE_CONTENT(cursor.getString(offset + 13));
        entity.setREPLY_CLASS(cursor.getString(offset + 14));
        entity.setREPLY_DEADLINE(cursor.getLong(offset + 15));
        entity.setRECEIVE_COMMENT(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCARD_ID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTASK_TYPE(cursor.getInt(offset + 18));
        entity.setTASK_STATE(cursor.getInt(offset + 19));
        entity.setDISPATCH_TIME(cursor.getLong(offset + 20));
        entity.setUPLOAD_FLAG(cursor.getInt(offset + 21));
        entity.setEXTEND(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tasks" to-many relationship of HistoryTask. */
    public List<Task> _queryHistoryTask_Tasks(String TASK_ID) {
        synchronized (this) {
            if (historyTask_TasksQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TASK_ID.eq(null));
                historyTask_TasksQuery = queryBuilder.build();
            }
        }
        Query<Task> query = historyTask_TasksQuery.forCurrentThread();
        query.setParameter(0, TASK_ID);
        return query.list();
    }

}
